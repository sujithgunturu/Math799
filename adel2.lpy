import random
import math
import os.path


# Build the leaves
import alinea.adel.fitting as fitting
from alinea.adel.symbol import build_symbols
import alinea.adel.data as data

pj = os.path.join

TEMP = 20
DIAM =  0.0023 #Diametre de la tige
TIMESTEP = 1
nb_plant = 1
STEPS = 60

alpha =  -1.39
beta = -2. * (alpha + math.sqrt(-alpha))
gamma = 2. * math.sqrt(-alpha) + alpha


#Todo : mettre extension des feuilles dans classe feuille, virer la decomposition
#eventuellement lire tableau r direct
#voir couplage avec symbol plantGL genere par christophe 

# Spacer :     S
# newPlant :   P
# doplante :   D
# Apex :       A
# En :         e
# Leaf :       l
# MatureLeaf : L
# MatureEn :   E 

def leaves_db():
    import cPickle as Pickle
    data_dir = os.path.dirname(data.__file__) 
    fn = pj(data_dir,'leaves_simple.db')
    f = open(fn)
    leaves = Pickle.load(f)
    f.close()
    return leaves

leaves = leaves_db()

def leaf(rank, radius_max, length_max, length):
  global leaves
  nb_points = 5
  db = leaves
  rank_max = max(map(int,db.keys()))
  rank = min(rank, rank_max)
  _leaves = db.get(str(rank), db.get(str(rank+1), db.get(str(rank-1), [])))
  
  for l in _leaves:
    mesh = None
    try:
      x,y,s,r = l
      leaf_new = fitting.fit3(x, y, s, r, nb_points)
      pts, ind = fitting.mesh2(leaf_new, length_max, length, radius_max) 
      mesh = fitting.plantgl_shape(pts, ind)
      break
    except Exception, e:
      continue
  return mesh


def get_development(line, col):

  tab = [[0,0,0,81,],
         [0,22,27,145,],
         [14,33,44,192,],
         [27,70,94,239,],
         [41,104,141,288,],
         [58,130,177,330,],
         [90,134,190,345,],
         [122,135,199,352,],
         [152,135,207,356,],
         [182,138,218,362,],
         [209,150,240,372,],
         [234,153,250,388,]]

  return tab[line][col]
  

def get_dimensions(line, col):
  """ 
  Return dimensions for line and col
  If line or col < 0, return the total number of line
  """

  tab = [[0.029,0.0263,0,0.0078,],
         [0.069,0.034,0,0.0093,],
         [0.1153,0.0417,0,0.0108],
         [0.1325,0.0558,0,0.0157],
         [0.1602,0.0838,0,0.0213],
         [0.2329,0.1187,0.0241,0.0267],
         [0.3164,0.1293,0.0438,0.0322],    
         [0.3956,0.1341,0.0586,0.049],
         [0.4429,0.1348,0.1149,0.0619],
         [0.4383,0.1406,0.1264,0.0634],
         [0.3936,0.1488,0.1247,0.055],
         [0.2211,0.1418,0.1103,0.037]]

  if(line < 0 or col < 0):
    return len(tab)
  
  return tab[line][col]


def get_nb_phy():
    return get_dimensions(-1, -1)
  
  
def dTT(temp, dt, temp_base=9.8):
    return max(0, (temp - temp_base) * dt) 


def TINI(rank):
    """ Dates d'apparition des primordias (dd) """
    return float(get_development(rank - 1, 0))
  
def DIE(rank):
    """ Delai initiation - extension rapide des feuilles (dd) """
    return float(get_development(rank - 1, 1))
   
def DIA(rank):
    """ Delai initiation - apparition des feuilles (dd) """ 
    return float(get_development(rank - 1, 2))
  
def DIL(rank):
    """ Delai initiation - ligulation des feuilles (dd) == DIE_EN"""
    return float(get_development(rank - 1, 3))
  
def DIF_EN(rank) :
    """ Delai initiation - Fin extension Entrenoeud  : a revoir """
    return float(DIL(rank) + 0.6 * (DIL(rank) - DIE(rank)))


def L_LIMB(rank) :
    """ Profils de longueur de limbe (Fournier and Andrieu, 1998) """
    return get_dimensions(rank - 1, 0)

def L_GAINE(rank):
    """ Profils de longueur de gaine (Fournier and Andrieu, 1998) """
    return get_dimensions(rank - 1, 1)

def L_ENT(rank):
    """ Profils de longueur d'entrenoeud (Fournier and Andrieu, 1998) """
    return get_dimensions(rank - 1, 2)

def Wmax_LI(rank) :
    """ Largeur max de limbe """
    return get_dimensions(rank - 1, 3)

def AZIM(rank) :
    """ Azimuth des phytomere,parametrisation proposee dans Fournier 1998 a partir de Drouet 1997 """
    ang = 180. * (rank % 2)
    r = random.random() - 0.5
    if (rank < 6) :
        return ang
    elif (rank <= 8):
        return ang + r * 20.
    else :
        return ang + r * 60.
   

def yLin(t, tdeb, tfin, ydeb, yfin):
    """	interpolateur lineaire """
    if (t <= tdeb):
        return ydeb
    elif (t >= tfin): 
        return yfin
    else :
        return ydeb + (yfin - ydeb) * (t - tdeb) / (tfin - tdeb)


class ApexData:
  
  def __init__(self, num_plante):
    self.nump = num_plante
    self.NF = get_nb_phy()
    self.n = 0
    self.age = dTT(TEMP, TIMESTEP)
    self.Tini = TINI(1)
    self.Torg = TEMP


class EnData:
  
  def __init__(self, apex_data):
    self.nump = apex_data.nump
    self.num = apex_data.n + 1
    self.l = 0.
    self.IsExtended = False
    self.L = L_ENT(self.num)
    self.diam = DIAM
    self.age = apex_data.age - apex_data.Tini
    self.Tdeb = DIL(self.num)
    self.Tfin = DIF_EN(self.num)
    self.Torg = apex_data.Torg
    if (self.num > 1):
      self.hw = L_GAINE(self.num - 1)
    else : 
      self.hw = 0


class LeafData:
  # a restructurer en classes

  def __init__(self, apex_data):

    self.nump = apex_data.nump
    self.num = apex_data.n + 1
    self.Torg = apex_data.Torg
    self.age = apex_data.age-apex_data.Tini
    self.l = 0.
    self.g = 0.
    self.wm = Wmax_LI(self.num)
    self.ltube = 0.# longueur enroulee (limbe + gaine)
    self.lvis = 0. #longueur visible limbe
    self.gvis = 0. #longueur visible gaine
    self.IsExtended = False

    # Kin Data
    n = self.num
    self.L = L_LIMB(n)
    self.G = L_GAINE(n)
    self.TdebL = DIE(n)
    self.TfinL = DIE(n) + L_LIMB(n) / (L_LIMB(n) + L_GAINE(n)) * (DIL(n) - DIE(n))
    self.TfinG = DIL(n)

    # Geom Data
    self.azim = AZIM(n)
    self.diam = DIAM
    self.rand = random.random()

    # HW Data
    n = min(apex_data.n + 1, apex_data.NF - 1)
    self.Tapptip = DIA(n)
    self.hwtip = (L_LIMB(n) + L_GAINE(n)) * (DIA(n) - DIE(n)) / (DIL(n) - DIE(n))
    self.Tnextip = TINI(n + 1) - TINI(n) + DIA(n + 1)
    self.hwnextip = (L_LIMB(n+1) + L_GAINE(n+1)) * (DIA(n+1) - DIE(n+1)) / (DIL(n+1) - DIE(n+1))
    self.Tcol = DIL(n)
    self.hwcol = L_GAINE(n)
    
    if n > 1 : 
      lgprec = L_GAINE(n-1)
    else : 
      lgprec = 0.
    self.maxGv = min(L_GAINE(n), L_ENT(n) + L_GAINE(n) - lgprec)
    self.TfinEn = DIF_EN(self.num)
  


module P(n) : scale = 1
module A(ad) : scale = 2
module e(ed) : scale = 2
module E(ed) : scale = 2
module l(ld) : scale = 2
module L(ld) : scale = 2

def Start():
	global hw
	hw = 0.

Axiom:  D(0, nb_plant)

derivation length: STEPS
production:


A(ad) : 
   ad.age += dTT(ad.Torg, TIMESTEP)
   produce A(ad)
   
l(ld) :
   ld.age += dTT(ld.Torg, TIMESTEP)
   ld.IsExtended = 0
   produce l(ld)
   
e(ed) : 
   ed.age += dTT(ed.Torg, TIMESTEP)
   ed.IsExtended = 0  
   produce e(ed)


decomposition:
maximum depth: 100

D(done, todo) : 
   if (todo > 0):
      data = ApexData(done+1) 
      produce  P(done + 1)A(data)  D(done + 1, todo - 1)


D(done, todo) : 
   if (todo <= 0):
      produce *

A(ad) :
   if ((ad.age >= ad.Tini) and (ad.n < ad.NF)) :
        ed = EnData(ad)
        ld = LeafData(ad)
        ad.n += 1
        ad.Tini = TINI(ad.n)
        produce e(ed) [l(ld)] A(ad)
   elif (ad.n >= ad.NF) : 
        produce *


l(ld) : 
   if (not ld.IsExtended) and (ld.age < ld.TfinEn):
        ld.l = yLin(ld.age, ld.TdebL, ld.TfinL, 0, ld.L)
        ld.g = yLin(ld.age, ld.TfinL, ld.TfinG, 0, ld.G)
        ld.lvis = yLin(ld.age, ld.Tapptip, ld.Tcol, 0., ld.L)
        ld.gvis = yLin(ld.age, ld.Tcol, ld.TfinEn, 0, ld.maxGv)
        if (ld.age <= ld.Tnextip) :
            ld.ltube = yLin(ld.age, ld.Tapptip, ld.Tnextip, ld.hwtip, ld.hwnextip)
        else:
            ld.ltube = yLin(ld.age, ld.Tnextip, ld.Tcol, ld.hwnextip, ld.hwcol)
        ld.IsExtended = True
        produce l(ld)
   elif (ld.age >= ld.TfinEn):
        ld.ltube = ld.hwcol
        ld.l = ld.L
        ld.g = ld.G
        ld.lvis = ld.L
        ld.gvis = ld.maxGv
        produce L(ld)

e(ed) :
   if (not ed.IsExtended) and (ed.age < ed.Tfin):
        ed.l = yLin(ed.age, ed.Tdeb, ed.Tfin, 0, ed.L)
        ed.IsExtended = True
        produce e(ed)
   elif (ed.age >= ed.Tfin):
        ed.l = ed.L
        produce E(ed)  

homomorphism:
maximum depth: 2

l(ld) :
  #produce ]_(ld.diam)F(ld.gvis)[/(ld.azim)_(ld.wm);(2)+(45)F(ld.lvis)
  leafg = leaf(ld.num, ld.wm, ld.L, ld.lvis)
  if leafg:
    produce ]_(ld.diam)F(ld.gvis)[/(ld.azim);(2)@g(leaf(ld.num, ld.wm, ld.L, ld.lvis))
  
L(ld) :
  #produce ]_(ld.diam)F(ld.gvis)[/(ld.azim)_(ld.wm);(2)+(45)F(ld.lvis)
  leafg = leaf(ld.num, ld.wm, ld.L, ld.lvis)
  if leafg:
    produce ]_(ld.diam)F(ld.gvis)[/(ld.azim);(2)@g(leafg)
  
e(ed):
  evis = max(0, ed.l - ed.hw)
  if evis > 0 :
     produce _(ed.diam)F(evis)

E(ed):
  evis = max(0, ed.l - ed.hw)
  if evis > 0 :
     produce _(ed.diam)F(evis)

endlsystem
